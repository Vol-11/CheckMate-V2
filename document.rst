=======================================
📝 CheckMate V2 アプリケーション設計資料
=======================================

:バージョン: 5 (最新版)
:最終更新日: 2025-08-23

---

1. 概要
======

**CheckMate V2** は、学生やプロフェッショナルが日々の持ち物を忘れずに管理するためのプログレッシブウェブアプリ（PWA）です。曜日ごとに必要なアイテムを登録し、日々のチェックリストを自動生成することで、忘れ物を防止します。

さらに、万が一忘れた場合も記録・分析し、その結果を多角的に可視化することで、将来の忘れ物を減らすことを目的としています。

全てのデータはブラウザ内の **IndexedDB** に保存され、オフラインでも快適に動作します。

2. 機能仕様
==========

2.1. アイテム管理 (CRUD)
------------------------

アイテムの新規登録、編集、削除を行います。

設定可能な情報:
  * ``名前`` (必須)
  * ``カテゴリー``
  * ``重要度`` (重要, 普通)
  * ``必要な曜日`` (複数選択可)
  * ``バーコード`` (任意)
  * ``メモ`` (任意)

2.2. クイックアクセスタブ
------------------------

主要な情報へ素早くアクセスするためのダッシュボードです。

* **ヘッダー**: 総アイテム数、チェック済み数、今日のアイテム数を常時表示。
* **クイック登録**: アイテム名とカテゴリーのみで迅速にアイテムを登録。
* **今日のリスト**: 今日のチェックリストを即座に確認・操作。
* **明日のリスト**: 明日の持ち物を事前に確認。

2.3. チェックリストタブ
------------------------

曜日を選択し、その曜日に必要なアイテムのチェックリストを自動生成します。

* **忘れ物ハイライト**:

  * **警告 (黄色)**: 過去に忘れたことがあるアイテム。
  * **危険 (赤色)**: 3回以上忘れたことがあるアイテム。

* **チェックモード**:

  * **手動チェック**: チェックボックスをタップしてチェック。
  * **スキャンチェック**: バーコードをスキャンして自動でチェック。

* **一括操作**: 全選択、全解除、チェック状態のリセット。

2.4. 忘れ物記録と統計タブ
----------------------------

忘れ物を記録し、傾向を分析します。

* **記録モード**:

  * その日の持ち物リストから、忘れたアイテムをチェックして記録として保存。
  * 操作を間違えた場合のための「元に戻す」機能。

* **履歴・統計モード**:

  * **サマリー**: 総忘れ物回数と記録日数。
  * **忘れ物ワーストランキング**: 忘れ物回数が多い順のアイテムランキング。
  * **カテゴリ別棒グラフ**: カテゴリごとの忘れ物回数を可視化。
  * **曜日別棒グラフ**: 曜日ごとの忘れ物回数を可視化。
  * **全履歴リスト**: 過去の忘れ物を日付ごとに一覧表示。記録の個別削除も可能。
  * 1ヶ月以上前の古い記録の一括削除機能。

2.5. 一覧・検索タブ
--------------------

全登録アイテムの管理と検索を行います。

* **一覧表示**: 全ての登録済みアイテムを表示。
* **絞り込み**: カテゴリーやキーワードでリアルタイムにフィルタリング。
* **並び替え**: 名前、カテゴリー、重要度、登録日でソート。

2.6. 設定タブ
----------------

アプリケーション全体の設定とデータ管理を行います。

* **統計情報**:

  * 総アイテム数、カテゴリ数、バーコード付きアイテム数、完了率など、より詳細な統計を表示。

* **データ管理**:

  * **JSONエクスポート/インポート**: 全データ（アイテム、カテゴリ、忘れ物履歴）のバックアップと復元。
  * **簡易バックアップ/復元**: LocalStorageを利用した手軽なバックアップ。
  * **データリセット**: 全アイテム、カテゴリ、忘れ物履歴の個別リセット。

* **カテゴリ管理**:

  * 新規カテゴリの追加と削除。

  .. note::

     カテゴリの削除は、そのカテゴリを使用しているアイテムが存在しない場合のみ可能です。

* **PWA**: アプリをホーム画面にインストールするためのボタン。

---

3. データモデル (IndexedDB)
========================

* **データベース名**: ``wasuremonoPro``
* **バージョン**: ``5``

3.1. ``items`` ストア
---------------------

アイテム情報を格納します。

* **キー**: ``id`` (auto-increment)
* **主なプロパティ**:

  * ``name``: ``String``
  * ``category``: ``String``
  * ``priority``: ``String``
  * ``code``: ``String``
  * ``memo``: ``String``
  * ``days``: ``Array<String>``
  * ``checked``: ``Boolean``
  * ``createdAt``: ``Date``
  * ``updatedAt``: ``Date``

* **インデックス**: ``category``, ``name``, ``code``

3.2. ``categories`` ストア
--------------------------

ユーザーが作成したカテゴリ情報を格納します。

* **キー**: ``id`` (タイムスタンプに基づく手動生成)
* **主なプロパティ**: ``name``: ``String``
* **インデックス**: ``name`` (unique)

3.3. ``forgotten_records`` ストア
----------------------------------

忘れ物記録を格納します。

* **キー**: ``date`` (YYYY-MM-DD形式の文字列)
* **主なプロパティ**:

  * ``date``: ``String``
  * ``forgottenItems``: ``Array<Number>`` (アイテムIDの配列)

* **インデックス**: ``date_idx`` (unique)
* **仕様**: 同一日付の記録は上書きされます。

---

4. バックアップシステム
=====================

本アプリは2種類のバックアップ方法を提供します。

4.1. JSONファイルによるエクスポート/インポート
----------------------------------------------

完全なデータをファイルとして管理します。

* **エクスポート**: 全てのアイテム、カテゴリ、忘れ物履歴を含むJSONファイルをダウンロードします。
* **インポート**: エクスポートされたJSONファイルを読み込み、現在の全データを上書きして復元します。
* **ファイル構造**:

  .. code-block:: json

     {
       "version": 3,
       "categories": [
         { "id": "1672531200000", "name": "ドキュメント" }
       ],
       "items": [
         { "id": 1, "name": "PC", "category": "電子機器", ... }
       ],
       "forgottenRecords": [
         { "date": "2023-10-27", "forgottenItems": [1] }
       ],
       "exportedAt": "2023-10-28T00:00:00.000Z",
       "app": "CheckMate-V2"
     }

4.2. LocalStorageによる簡易バックアップ/復元
----------------------------------------------

手軽なバックアップ手段ですが、永続性は保証されません。

* **バックアップ**: 現在の全データをブラウザのLocalStorageに保存します。
* **復元**: LocalStorageに保存されたデータから復元します。

.. warning::

   この方法はブラウザのキャッシュクリアなどでデータが失われる可能性があります。重要なデータの保存にはJSONエクスポートを推奨します。

---

5. ファイル別役割詳細
=====================

5.1. ``index.html``
-------------------

アプリケーションの唯一のエントリーポイントであり、UIの骨格を定義します。

* 全てのJavaScriptファイルを読み込みます。
* 主要なイベントリスナー（JSONインポート/エクスポートなど）を直接含みます。

5.2. JavaScript (``js/`` ディレクトリ)
--------------------------------------

.. rst-class:: toc-b

.. contents::
   :local:
   :depth: 1

データと状態管理
~~~~~~~~~~~~~~~~~~

* ``js/indexdb.js``: **データベース層の中核**。IndexedDBのセットアップと、各ストアに対するCRUD操作の非同期関数を全て提供します。
* ``js/global.js``: アプリケーション全体で共有されるグローバル変数（``items`` 配列、ソート順 ``sortBy`` など）を定義します。

UI/UXと主要ロジック
~~~~~~~~~~~~~~~~~~~~~

* ``js/tab.js``: 主要タブ（クイック, 登録, 一覧など）の表示切り替えロジックを管理します。
* ``js/items.js``: **アイテム関連の最重要ファイル**。``createItemElement()`` でのHTML要素生成、``renderItems()`` での一覧描画、``addNewItem()`` でのアイテム追加ロジックを含みます。
* ``js/checklist.js``: 「チェック」タブと「クイック」タブ内のチェックリスト表示・操作を担当します。
* ``js/forgotten.js``: 「忘れ物」タブのUIロジック全体（記録モードと統計モードの切り替え、データ保存、統計描画）を管理します。
* ``js/quick.js``: 「クイック」タブでの簡易アイテム追加機能を提供します。
* ``js/category.js``: カテゴリ管理（追加・削除、プルダウンへの反映）機能を提供します。
* ``js/search.js``: 「一覧」タブのリアルタイム検索フィルタリングを処理します。
* ``js/sort.js``: 「一覧」タブの並び替えロジックを管理します。
* ``js/ui.js``: 編集モーダルの表示・非表示・保存ロジックを管理します。
* ``js/status.js``: 画面下部に操作結果（成功、エラー等）を通知する ``showStatus`` 関数を提供します。

統計
~~~~~~

* ``js/stats.js``: ヘッダーや設定タブに表示される基本統計（総アイテム数など）を計算・更新します。
* ``js/stats_util.js``: **高度な統計計算ユーティリティ**。``getForgottenItemStats()`` （忘れ物回数集計）や ``getForgottenStats()`` （忘れ物タブ用の多角的な統計情報生成）を提供します。

機能特化
~~~~~~~~~~

* ``js/scan_mode.js``: チェックモード（手動/スキャン）のUI切り替えを管理します。
* ``js/backup.js``: LocalStorageによる簡易バックアップ・復元機能を提供します。
* ``js/pwa.js``: PWAのインストールプロンプトを制御します。
* ``js/dark_mode.js``: ダークモード切り替えボタンのイベントを処理します。
* ``js/dark_mode_startup.js``: ページ読み込み時に初期テーマ（ライト/ダーク）を適用します。
* ``js/style_config.js``: Tailwind CSSのカスタマイズ設定を定義します。

5.3. その他
-----------

* ``sw.js``: **Service Workerファイル**。リソースのキャッシング戦略を定義し、オフライン動作を実現します。
* ``manifest.webmanifest``: PWAのメタデータ（アプリ名、アイコン、テーマカラーなど）を定義するマニフェストファイル。
