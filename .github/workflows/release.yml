name: Auto Release on Commit

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit information
        id: commit_info
        run: |
          # 最新のコミット情報を取得
          commit_hash=$(git rev-parse HEAD)
          commit_author=$(git log -1 --pretty=format:'%an')
          commit_msg=$(git log -1 --pretty=format:'%s')
          commit_body=$(git log -1 --pretty=format:'%b')
          commit_date=$(git log -1 --pretty=format:'%cd' --date=iso)
          
          echo "commit_hash=$commit_hash" >> $GITHUB_OUTPUT
          echo "commit_author=$commit_author" >> $GITHUB_OUTPUT
          echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT
          echo "commit_date=$commit_date" >> $GITHUB_OUTPUT
          
          # コミットボディをファイルに保存（改行対応）
          echo "$commit_body" > commit_body.txt
          
          echo "📝 Commit Info:"
          echo "  Hash: $commit_hash"
          echo "  Author: $commit_author"
          echo "  Message: $commit_msg"
          echo "  Date: $commit_date"

      - name: Get commits since last release
        id: commits_since_release
        run: |
          # 最新のリリースタグを取得
          latest_tag=$(git tag -l 'v[0-9a-f]*.[0-9a-f]*.[0-9a-f]*' | sort -V | tail -n1)
          
          if [ -z "$latest_tag" ]; then
            echo "No previous release found"
            commits_count=1
            commits_log="Initial release"
          else
            # 最新タグから現在までのコミット数と内容を取得
            commits_count=$(git rev-list ${latest_tag}..HEAD --count)
            commits_log=$(git log ${latest_tag}..HEAD --pretty=format:'- %s (%h) by %an' --reverse)
            echo "📋 Commits since $latest_tag ($commits_count commits):"
            echo "$commits_log"
          fi
          
          echo "commits_count=$commits_count" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          
          # コミットログをファイルに保存
          echo "$commits_log" > commits_log.txt

      - name: Extract version from commit message or increment by 1 (hex)
        id: get_version
        run: |
          commit_msg="${{ steps.commit_info.outputs.commit_msg }}"
          
          # コミットメッセージの最初の行からvx.x.xを抽出（16進数対応）
          if echo "$commit_msg" | grep -qE '^v?[0-9a-f]+\.[0-9a-f]+\.[0-9a-f]+'; then
            # バージョンが見つかった場合
            version=$(echo "$commit_msg" | grep -oE '^v?[0-9a-f]+\.[0-9a-f]+\.[0-9a-f]+')
            # vがなければ追加
            if [[ ! "$version" =~ ^v ]]; then
              version="v$version"
            fi
            echo "new_tag=$version" >> $GITHUB_OUTPUT
            echo "from_commit=true" >> $GITHUB_OUTPUT
            echo "✅ Found version in commit message: $version"
          else
            # バージョンが見つからなかった場合、既存タグから16進数で1つ繰り上げ
            prev="${{ steps.commits_since_release.outputs.latest_tag }}"
            if [ -z "$prev" ]; then
              new_tag="v0.0.1"
            else
              # vX.Y.Z を16進数として処理
              vers=${prev#v}
              IFS='.' read -r MA MI PA <<< "$vers"
              
              # 16進数を10進数に変換
              ma_dec=$((16#$MA))
              mi_dec=$((16#$MI))
              pa_dec=$((16#$PA))
              
              # パッチバージョンに1を足す
              pa_dec=$((pa_dec + 1))
              
              # 16進数の桁上がり処理
              if [ $pa_dec -ge 16 ]; then
                mi_dec=$((mi_dec + pa_dec / 16))
                pa_dec=$((pa_dec % 16))
              fi
              
              if [ $mi_dec -ge 16 ]; then
                ma_dec=$((ma_dec + mi_dec / 16))
                mi_dec=$((mi_dec % 16))
              fi
              
              # 10進数を16進数に変換して出力
              new_tag=$(printf "v%x.%x.%x" $ma_dec $mi_dec $pa_dec)
            fi
            echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
            echo "from_commit=false" >> $GITHUB_OUTPUT
            echo "🔄 Incremented version by 1 (hex): $new_tag (from $prev)"
          fi

      - name: Find available tag version
        id: find_available_tag
        run: |
          initial_tag="${{ steps.get_version.outputs.new_tag }}"
          echo "🔍 Starting tag search from: $initial_tag"
          
          # 初期タグから始めて、利用可能なタグを見つける
          base_tag=${initial_tag#v}
          IFS='.' read -r MA MI PA <<< "$base_tag"
          
          ma_dec=$((16#$MA))
          mi_dec=$((16#$MI))
          pa_dec=$((16#$PA))
          
          max_attempts=50  # 最大50回まで試行
          attempts=0
          
          while [ $attempts -lt $max_attempts ]; do
            current_tag=$(printf "v%x.%x.%x" $ma_dec $mi_dec $pa_dec)
            
            echo "🔍 Checking tag: $current_tag"
            
            if ! git rev-parse -q --verify "refs/tags/${current_tag}" >/dev/null 2>&1; then
              echo "✅ Found available tag: $current_tag"
              echo "available_tag=$current_tag" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "⚠️ Tag $current_tag already exists"
            fi
            
            # 次のバージョンを計算
            pa_dec=$((pa_dec + 1))
            
            # 16進数の桁上がり処理
            if [ $pa_dec -ge 16 ]; then
              mi_dec=$((mi_dec + pa_dec / 16))
              pa_dec=$((pa_dec % 16))
            fi
            
            if [ $mi_dec -ge 16 ]; then
              ma_dec=$((ma_dec + mi_dec / 16))
              mi_dec=$((mi_dec % 16))
            fi
            
            attempts=$((attempts + 1))
          done
          
          echo "❌ Could not find available tag after $max_attempts attempts"
          echo "found=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Verify final tag availability
        id: verify_tag
        run: |
          final_tag="${{ steps.find_available_tag.outputs.available_tag }}"
          
          echo "🔍 Final verification for tag: $final_tag"
          
          if git rev-parse -q --verify "refs/tags/${final_tag}" >/dev/null 2>&1; then
            echo "❌ ERROR: Tag $final_tag exists during final check!"
            echo "This should not happen. Please check for race conditions."
            exit 1
          else
            echo "✅ Final tag verification passed: $final_tag"
            echo "verified_tag=$final_tag" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.find_available_tag.outputs.foun
