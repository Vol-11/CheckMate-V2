      - name: Get commits in this push
        id: push_commits
        run: |
          # GitHub Actionsのプッシュイベントから、今回のプッシュに含まれるコミットを取得
          echo "📋 Processing push event commits..."
          
          # github.event.commits から今回のプッシュのコミットを取得
          commits_json='${{ toJson(github.event.commits) }}'
          
          if [ "$commits_json" != "null" ] && [ "$commits_json" != "[]" ]; then
            echo "✅ Found push event commits"
            echo "$commits_json" | jq -r '.[] | "- **\(.message)** (`\(.id[0:7])`) by \(.author.name)"' > push_commits.txt
            commits_count=$(echo "$commits_json" | jq '. | length')
            echo "push_commits_count=$commits_count" >> $GITHUB_OUTPUT
            echo "has_push_commits=true" >> $GITHUB_OUTPUT
            
            echo "📊 This push contains $commits_count commits:"
            cat push_commits.txt
          else
            echo "⚠️ No push event commits found, falling back to git log"
            echo "has_push_commits=false" >> $GITHUB_OUTPUT
            echo "push_commits_count=1" >> $GITHUB_OUTPUT
            echo "- **${{ steps.commit_info.outputs.commit_msg }}** (\`${{ steps.commit_info.outputs.commit_short_hash }}\`) by ${{ steps.commit_info.outputs.commit_author }}" > push_commits.txt
          fi

      - name: Generate release notes
        if: steps.check_commits.outputs.skip_release == 'false' && steps.find_available_tag.outputs.found == 'true'
        id: release_notes
        run: |
          tag="${{ steps.verify_tag.outputs.verified_tag }}"
          initial_tag="${{ steps.get_version.outputs.new_tag }}"
          commit_msg="${{ steps.commit_info.outputs.commit_msg }}"
          commit_author="${{ steps.commit_info.outputs.commit_author }}"
          commit_hash="${{ steps.commit_info.outputs.commit_short_hash }}"
          commit_date="${{ steps.commit_info.outputs.commit_date }}"
          push_commits_count="${{ steps.push_commits.outputs.push_commits_count }}"
          has_push_commits="${{ steps.push_commits.outputs.has_push_commits }}"
          latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          has_body="${{ steps.commit_info.outputs.has_body }}"
          
          # リリースノートをファイルに直接書き込み
          {
            echo "## 📋 Release Information"
            echo ""
            echo "**Version**: $tag"
            echo "**Release Date**: $(date '+%Y-%m-%d %H:%M:%S JST')"
            
            if [ "$has_push_commits" == "true" ]; then
              echo "**Commits in this push**: $push_commits_count commits"
            else
              echo "**Commits included**: 1 commit"
            fi
            
            # バージョン自動調整の説明
            if [ "$initial_tag" != "$tag" ]; then
              echo ""
              echo "> **Note**: Originally planned as $initial_tag, but automatically adjusted to $tag due to existing tags."
            fi
            
            echo ""
            echo "## 📝 Latest Commit"
            echo ""
            echo "- **Message**: $commit_msg"
            echo "- **Author**: $commit_author"
            echo "- **Hash**: \`$commit_hash\`"
            echo "- **Date**: $commit_date"
            
            echo ""
            if [ "$has_push_commits" == "true" ] && [ "$push_commits_count" -gt 1 ]; then
              echo "## 📦 Commits in This Push"
              echo ""
              cat push_commits.txt
            else
              echo "## 📦 Changes in This Release"
              echo ""
              echo "- **$commit_msg** (\`$commit_hash\`) by $commit_author"
            fi
            
            echo ""
            echo "## 📊 Previous Release Comparison"
            echo ""
            
            if [ -n "$latest_tag" ]; then
              echo "**Previous version**: $latest_tag"
              total_commits_since=$(git rev-list ${latest_tag}..HEAD --count)
              echo "**Total commits since $latest_tag**: $total_commits_since commits"
              
              if [ "$total_commits_since" -gt "$push_commits_count" ]; then
                echo ""
                echo "<details>"
                echo "<summary>View all commits since $latest_tag</summary>"
                echo ""
                git log ${latest_tag}..HEAD --pretty=format:"- %s (\`%h\`) by %an" --date=short
                echo ""
                echo "</details>"
              fi
            else
              echo "This is the initial release."
            fi
            
            echo ""
            echo "## 📦 Assets"
            echo ""
            echo "- Source code archive (ZIP)"
            echo "- All source files as of commit \`$commit_hash\`"
            
            # コミットボディがある場合のみ追加
            if [ "$has_body" == "true" ] && [ -s commit_body.txt ]; then
              echo ""
              echo "## 📖 Additional Commit Details"
              echo ""
              echo "\`\`\`"
              cat commit_body.txt
              echo "\`\`\`"
            fi
            
            echo ""
            echo "---"
            echo "*Generated automatically by GitHub Actions*"
            
          } > release_notes.md
          
          echo "📝 Generated release notes for push with $push_commits_count commits"
