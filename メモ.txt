// チェック用スキャン検出（修正版）
async function onCheckDetected(result) {
    const code = result.getText();
    if (!code) return;

    const currentDay = window.currentDay;
    if (!currentDay) {
        console.warn('currentDay is not set');
        return;
    }

    // 現在の日付を取得
    const checkDate = document.getElementById('check-date-picker').value;

    // 通常のアイテムをチェック
    const dayItems = items.filter(i => i.days.includes(currentDay));
    const foundItem = dayItems.find(i => i.code === code);

    // 特別アイテムもチェック
    const override = await getOverride(checkDate);
    const specialItem = override?.added?.find(item => item.code === code);

    if (foundItem) {
        // 通常アイテムの処理（既存のロジック）
        if (!foundItem.checked) {
            foundItem.checked = true;
            updateItem(foundItem);
            updateStats();
            updateCheckDisplay();

            scanResults.set(code, {
                item: foundItem,
                timestamp: new Date(),
                status: 'checked'
            });

            checkStatusMessage.textContent = `✅ チェック完了: ${foundItem.name}`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 border border-green-300 dark:border-green-700';

            showCheckResult(`✅ ${foundItem.name}`, 'success', '自動でチェックしました');
            if (navigator.vibrate) navigator.vibrate([100, 50, 100, 50, 100]);
        } else {
            checkStatusMessage.textContent = `ℹ️ 既にチェック済み: ${foundItem.name}`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 border border-yellow-300 dark:border-yellow-700';
            if (navigator.vibrate) navigator.vibrate([200, 100, 200]);
        }
    } else if (specialItem) {
        // 特別アイテムの処理
        if (!specialItem.checked) {
            specialItem.checked = true;
            await saveOverride(override);
            updateStats();
            updateCheckDisplay();

            scanResults.set(code, {
                item: specialItem,
                timestamp: new Date(),
                status: 'checked'
            });

            checkStatusMessage.textContent = `✅ チェック完了: ${specialItem.name} (特別)`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 border border-green-300 dark:border-green-700';

            showCheckResult(`✅ ${specialItem.name}`, 'success', 'この日限定のアイテムです');
            if (navigator.vibrate) navigator.vibrate([100, 50, 100, 50, 100]);
        } else {
            checkStatusMessage.textContent = `ℹ️ 既にチェック済み: ${specialItem.name} (特別)`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 border border-yellow-300 dark:border-yellow-700';
            if (navigator.vibrate) navigator.vibrate([200, 100, 200]);
        }
    } else {
        // 既存の未登録アイテム処理
        const anyItem = items.find(i => i.code === code);
        if (anyItem) {
            checkStatusMessage.textContent = `⚠️ ${currentDay}曜日には不要: ${anyItem.name}`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300 border border-yellow-300 dark:border-yellow-700';
            showCheckResult(`⚠️ ${anyItem.name}`, 'warning', `${currentDay}曜日のリストにありません`);
        } else {
            checkStatusMessage.textContent = `❌ 未登録アイテム: ${code}`;
            checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 border border-red-300 dark:border-red-700';
            showCheckResult('❌ 未登録アイテム', 'error', `バーコード: ${code}`);
        }
        if (navigator.vibrate) navigator.vibrate([300, 100, 300]);
    }

    renderScanResults();

    setTimeout(() => {
        checkStatusMessage.textContent = '📷 バーコードを読み取って自動チェック';
        checkStatusMessage.className = 'p-3 rounded-lg mb-4 text-center font-medium bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 border border-blue-200 dark:border-blue-700';
        document.getElementById('check-result').classList.add('hidden');
    }, 3000);
}

// チェック結果表示用のヘルパー関数
function showCheckResult(title, type, subtitle) {
    const checkResult = document.getElementById('check-result');
    let bgClass, textClass, borderClass;

    switch(type) {
        case 'success':
            bgClass = 'bg-green-100 dark:bg-green-900/30';
            textClass = 'text-green-700 dark:text-green-300';
            borderClass = 'border-green-300 dark:border-green-700';
            break;
        case 'warning':
            bgClass = 'bg-yellow-100 dark:bg-yellow-900/30';
            textClass = 'text-yellow-700 dark:text-yellow-300';
            borderClass = 'border-yellow-300 dark:border-yellow-700';
            break;
        case 'error':
            bgClass = 'bg-red-100 dark:bg-red-900/30';
            textClass = 'text-red-700 dark:text-red-300';
            borderClass = 'border-red-300 dark:border-red-700';
            break;
    }

    checkResult.className = `p-4 rounded-lg mb-4 text-center font-semibold ${bgClass} ${textClass} border ${borderClass}`;
    checkResult.innerHTML = `
        <div>${title}</div>
        <div class="text-sm mt-1">${subtitle}</div>
    `;
    checkResult.classList.remove('hidden');
}
